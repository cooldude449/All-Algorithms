5)	Write a program to clip a line using cohen Sutherland line clipping algorithm.

#include<iostream.h>
#include<conio.h>
#include<math.h>
#include<graphics.h>
#include<process.h>
void draw(int x1,int y1,int x2,int y2,int c)
{
if((x2-x1)==0)
{
   if(y1>y2)
   {     int temp;
       temp=y1;
       y1=y2;
       y2=temp;
   }
      for(int i=y1;i<=y2;i++)
	   putpixel(x1,i,c);

}
else if((y2-y1)==0)
{
    if(x1>x2)
    {     int temp;
       temp=x1;
       x1=x2;
       x2=temp;
    }
      for(int i=x1;i<=x2;i++)
	  putpixel(i,y1,c);
}
else
{
	if(x1>x2)
	{
		float temp;
		temp=x1;
		x1=x2;
		x2=temp;
		temp=y1;
		y1=y2;
		y2=temp;
	}
	float m;
	float x=x1,y=y1,d,a,b;
	m=(y2-y1)/(x2-x1);
	a=y2-y1;
	b=x1-x2;
	if(fabs(m)<1)
	{
		if(y1<y2)
		{
			d=(2*a)+b;
			while(x<=x2)
			{
				if(d<0)
				{
					d=d+(2*a);
				}
				else
				{
					d=d+(2*a)+(2*b);
					y++;
				}
				x++;
				putpixel(x,y,c);
			}
		}
	 else
	 {
		d=(2*a)-b;
		while(x<=x2)
		{
			if(d>0)
			{
				d=d+(2*a);
			}
			else
			{
				d=d+(2*a)-(2*b);
				y--;
			}
			x++;
			putpixel(x,y,c);
		}
	   }
}
	else
	{
		if(y1<y2)
		{
			d=a+(2*b);
			while(y<=y2)
			{
				if(d>0)
				{
					d=d+(2*b);
				}
				else
				{
					d=(d+(2*a))+(2*b);
					x++;
				}
				y++;
				putpixel(x,y,c);
			}
		 }
		  else
		 {
			d=a-(2*b);
			while(y>=y2)
			{
				if(d<0)
				{
					d=d-(2*b);
				}
				else
				{
					d=(d+(2*a))-(2*b);
					x++;
				}
				y--;
				putpixel(x,y,c);
			}
		   }
	}
}
}
enum{TOP=0x1,BOTTOM=0x2,RIGHT=0x4,LEFT=0x8};
unsigned int ComputeCode(double x,double y,double xmin,double xmax,double ymin,double ymax)
{

unsigned int code=0;
if(y>ymax)
	code|=TOP;
else if(y<ymin)
	code|=BOTTOM;
if(x>xmax)
	code|=RIGHT;
else if(x<xmin)
	code|=LEFT;
return code;
}


void Cohen(double x0,double y0,double x1,double y1,double xmin,double xmax,double ymin,double ymax)
{
unsigned int code0,code1,codeout;
int accept=0,done=0;
code0=ComputeCode(x0,y0,xmin,xmax,ymin,ymax);
code1=ComputeCode(x1,y1,xmin,xmax,ymin,ymax);
do
{
if(!(code0|code1))
{
	accept=1;
	done=1;
}
else if(code0 & code1)
{
done=1;
}
else
{
double x,y;
codeout=code0?code0:code1;
if(codeout & TOP)
{
x=x0+(x1-x0)*(ymax-y0)/(y1-y0);
y=ymax;
}
else if(codeout & BOTTOM)
{
x=x0+(x1-x0)*(ymin-y0)/(y1-y0);
y=ymin;
}
else if(codeout & RIGHT)
{
y=y0+(y1-y0)*(xmax-x0)/(x1-x0);
x=xmax;
}
else
{
y=y0+(y1-y0)*(xmin-x0)/(x1-x0);
x=xmin;
}
if(codeout==code0)
{
  x0=x;
  y0=y;
  code0=ComputeCode(x0,y0,xmin,xmax,ymin,ymax);
}
else
{
   x1=x;
  y1=y;
  code1=ComputeCode(x1,y1,xmin,xmax,ymin,ymax);
}
}
}
while(done==0);

if(accept)
{
draw(x0,y0,x1,y1,50);
}
}
void main()
{
 clrscr();
 int gdriver = DETECT, gmode, errorcode;
 initgraph(&gdriver, &gmode,"");
 errorcode = graphresult();
 if (errorcode != grOk)
 {
  cout<<"Graphics error: %s\n"<<grapherrormsg(errorcode);
  cout<<"\nPress any key to halt:";
  getch();
  exit(1);
 }
 float x1,y1,x2,y2,xmin,xmax,ymin,ymax;
 cout<<"\nEnter the starting coordinates\n";
 cout<<"\nEnter x1: ";
 cin>>x1;
 cout<<"\nEnter y1: ";
 cin>>y1;
 cout<<"\nEnter the ending coordinates\n";
 cout<<"\nEnter x2: ";
 cin>>x2;
 cout<<"\nEnter y2: ";
 cin>>y2;
 cout<<"\nEnter xmin: ";
 cin>>xmin;
 cout<<"\nEnter ymin: ";
 cin>>ymin;
 cout<<"\nEnter xmax: ";
 cin>>xmax;
 cout<<"\nEnter ymax: ";
 cin>>ymax;
 clrscr();
 draw(x1,y1,x2,y2,20);
 draw(xmin,ymin,xmax,ymin,44);
 draw(xmax,ymin,xmax,ymax,44);
 draw(xmin,ymax,xmax,ymax,44);
 draw(xmin,ymin,xmin,ymax,44);

 Cohen(x1,y1,x2,y2,xmin,xmax,ymin,ymax);
 getch();
}
 
